<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IO流</title>
      <link href="/2020/01/19/java-fu-xi/io-liu/"/>
      <url>/2020/01/19/java-fu-xi/io-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>好色风流，不是冤家不聚头。<br>只为淫人妇，难保妻儿否，<br>嬉戏眼前谋，孽满身后，<br>报应从头，万恶淫为首，<br>因此上媒色邪淫一笔勾。</strong></p><a id="more"></a><h2 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h2><ul><li>数据单位不同：8bit（字节流）、16bit（字符流）</li><li>流向不同：输入流、输出流</li><li>角色不同：节点流、处理流<br><img src="https://s2.ax1x.com/2020/01/19/1CHc8K.png" alt="1CHc8K.png"></li></ul><h3 id="IO流体系"><a href="#IO流体系" class="headerlink" title="IO流体系"></a>IO流体系</h3><p><a href="https://imgchr.com/i/1CHWKe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/19/1CHWKe.md.png" alt="1CHWKe.md.png"></a></p><ul><li>对于非文本文件，字节流用byte数组来存</li><li>对于文本文件，字符流用char数组来存</li></ul><h2 id="输入流"><a href="#输入流" class="headerlink" title="输入流"></a>输入流</h2><p>读取外部数据（磁盘等存储设备）到内存中。  </p><h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><p>读取内存数据到磁盘等存储设备</p><h2 id="实现字节文件复制"><a href="#实现字节文件复制" class="headerlink" title="实现字节文件复制"></a>实现字节文件复制</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"test2.txt"</span>);</span><br><span class="line">File desFile = <span class="keyword">new</span> File(<span class="string">"test3.txt"</span>);</span><br><span class="line"></span><br><span class="line">FileReader fileReader = <span class="keyword">null</span>;</span><br><span class="line">FileWriter fileWriter = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fileReader = <span class="keyword">new</span> FileReader(srcFile);</span><br><span class="line">    fileWriter = <span class="keyword">new</span> FileWriter(desFile);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] cbuf=<span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span> ((len=fileReader.read(cbuf))!=-<span class="number">1</span>)&#123;</span><br><span class="line">        fileWriter.write(cbuf,<span class="number">0</span>,len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> fileWriter != <span class="keyword">null</span>;</span><br><span class="line">        fileWriter.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        fileReader.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">File srcFile = <span class="keyword">new</span> File(<span class="string">"imgtest.jpg"</span>);</span><br><span class="line">File desFile = <span class="keyword">new</span> File(<span class="string">"imgtest2.jpg"</span>);</span><br><span class="line"></span><br><span class="line">FileInputStream fileInputStream = <span class="keyword">null</span>;</span><br><span class="line">FileOutputStream fileOutputStream=<span class="keyword">null</span>;</span><br><span class="line">BufferedInputStream bufferedInputStream=<span class="keyword">null</span>;</span><br><span class="line">BufferedOutputStream bufferedOutputStream=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">fileInputStream = <span class="keyword">new</span> FileInputStream(srcFile);</span><br><span class="line">fileOutputStream = <span class="keyword">new</span> FileOutputStream(desFile);</span><br><span class="line"></span><br><span class="line">bufferedInputStream=<span class="keyword">new</span> BufferedInputStream(fileInputStream);</span><br><span class="line">bufferedOutputStream=<span class="keyword">new</span> BufferedOutputStream(fileOutputStream);</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = bufferedInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    bufferedOutputStream.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span> bufferedOutputStream != <span class="keyword">null</span>;</span><br><span class="line">    bufferedOutputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    bufferedInputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fileOutputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fileInputStream.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程管理</title>
      <link href="/2020/01/14/linux-xue-xi/shi-cao-pian/jin-cheng-guan-li/"/>
      <url>/2020/01/14/linux-xue-xi/shi-cao-pian/jin-cheng-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在Linux中，每个进程都会对应一个父进程，而这个父进程可以复制多个子进程。每个进程以两种方式存在：前台和后台。一般系统进程都是后台进程，都会常驻在系统中，关机才结束。</p><a id="more"></a><h2 id="ps指令"><a href="#ps指令" class="headerlink" title="ps指令"></a>ps指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">常用的选项：</span><br><span class="line">  -a 显示当前终端的所有进程</span><br><span class="line">  -u 以用户的格式显示信息</span><br><span class="line">  -x 显示后台进程运行的参数</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/lqTLlT" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/14/lqTLlT.md.png" alt="lqTLlT.md.png"></a><br>标题解释：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">USER：用户</span><br><span class="line">PID：进程id</span><br><span class="line">%CPU：占用cpu</span><br><span class="line">%MEM：占用内存</span><br><span class="line">VSZ：占用虚拟内存</span><br><span class="line">RSS：占用物理内存</span><br><span class="line">TTY：使用的终端</span><br><span class="line">STAT：进程的状态（s：休眠，r：正在运行）</span><br><span class="line">START：启动时间</span><br><span class="line">TIME：占用CPU的总计时间</span><br><span class="line">COMMAN：进程执行的命令行</span><br></pre></td></tr></table></figure><h3 id="查看父进程"><a href="#查看父进程" class="headerlink" title="查看父进程"></a>查看父进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef</span><br></pre></td></tr></table></figure><p><strong>ppid表示父进程id</strong></p><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><p>若一个进程执行一半需要停止时，或者已消耗了很大的系统资源时，此时需要考虑停止进程。</p><h3 id="kill指令与killall指令"><a href="#kill指令与killall指令" class="headerlink" title="kill指令与killall指令"></a>kill指令与killall指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kill [选项] 进程号</span><br><span class="line">killall [选项] 进程名称</span><br><span class="line">----------------------</span><br><span class="line">常用选项：</span><br><span class="line">    -9 表示强迫进程立即停止</span><br></pre></td></tr></table></figure><h3 id="进程树"><a href="#进程树" class="headerlink" title="进程树"></a>进程树</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pstree [选项]</span><br><span class="line">常用选项：</span><br><span class="line">    -p 显示进程的pid</span><br><span class="line">    -u 显示进程所属用户</span><br></pre></td></tr></table></figure><h2 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h2><p>服务（service）本质就是进程，但是运行在后台，通常都会监听某个端口，等待其它进程的请求。</p><h3 id="查看服务名"><a href="#查看服务名" class="headerlink" title="查看服务名"></a>查看服务名</h3><ol><li>使用setup</li><li>/etc/init.d/</li></ol><h3 id="服务管理指令"><a href="#服务管理指令" class="headerlink" title="服务管理指令"></a>服务管理指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service 服务名 [start|stop|restart|reload|status]</span><br><span class="line">------------------------------------------------</span><br><span class="line">版本更新后使用sysytemctl指令</span><br></pre></td></tr></table></figure><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><h3 id="1-top指令"><a href="#1-top指令" class="headerlink" title="1.top指令"></a>1.top指令</h3><p>与ps指令很相似，最大的不同在于执行一段时间后可自动更新正在运行的进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">top [选项]</span><br><span class="line">常用选项：</span><br><span class="line">    -d 秒数  ：指定更新时间（默认3秒）</span><br><span class="line">    -i ： 不显示任何闲置进程和僵死进程</span><br><span class="line">    -p ： 指定进程id监控</span><br><span class="line">------------------------------------</span><br><span class="line">top指令执行后，可以输入u来进行筛选用户。</span><br><span class="line">            输入k来指定pid终止进程</span><br></pre></td></tr></table></figure><h3 id="2-netstat"><a href="#2-netstat" class="headerlink" title="2.netstat"></a>2.netstat</h3><p>查看网络服务情况。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">netstat [选项]</span><br><span class="line">常用选项：</span><br><span class="line">    -an：按一定顺序排列输出</span><br><span class="line">    -i ： 不显示任何闲置进程和僵死进程</span><br><span class="line">    -p ： 显示进程调用</span><br><span class="line">------------------------------------</span><br><span class="line">top指令执行后，可以输入u来进行筛选用户。</span><br><span class="line">            输入k来指定pid终止进程</span><br></pre></td></tr></table></figure><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p>vim /etc/sysconfig/iptables</p>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>磁盘分区与挂载</title>
      <link href="/2020/01/13/linux-xue-xi/shi-cao-pian/ci-pan-fen-qu-yu-gua-zai/"/>
      <url>/2020/01/13/linux-xue-xi/shi-cao-pian/ci-pan-fen-qu-yu-gua-zai/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>八月中秋白露，路上行人凄凉；<br>小桥流水稻花香，日夜千思万想。<br>心中不得宁静，清晨早念文章；<br>十年寒苦在书房，方显才高智广。</strong></p><a id="more"></a><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="分区方式"><a href="#分区方式" class="headerlink" title="分区方式"></a>分区方式</h3><ol><li>MBR分区<ul><li>最多支持四个主分区</li><li>系统只能安装在主分区上</li><li>扩展分区要占一个主分区</li><li>MBR最大支持2TB，但拥有最好的兼容性</li></ul></li><li>GPT分区<ul><li>支持无限多个主分区（单操作系统有限制，如windows限制128个）</li><li>最大支持18EB的容量</li></ul></li></ol><h3 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h3><p>Linux无论有几个分区，分给哪一个目录使用，它归根结底只有一个根目录，一个独立且唯一的文件结构。Linux采用一种叫“载入”的处理方法，将一个分区和一个目录联系起来。</p><h3 id="硬盘介绍"><a href="#硬盘介绍" class="headerlink" title="硬盘介绍"></a>硬盘介绍</h3><p><a href="https://imgchr.com/i/lbGhmq" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/14/lbGhmq.md.png" alt="lbGhmq.md.png"></a><br>查看分区情况：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk -f</span><br></pre></td></tr></table></figure><h3 id="分区命令"><a href="#分区命令" class="headerlink" title="分区命令"></a>分区命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fdisk 硬盘设备名（/dev/sdb1）</span><br></pre></td></tr></table></figure><h3 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs -t 格式（ext4） 硬盘设备名（/Dev/sdb1）</span><br></pre></td></tr></table></figure><h3 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h3><p>mount 硬盘设备名（/dev/sdb1） 目录（/home/test）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">↑↑↑↑↑↑↑是临时挂载</span><br><span class="line">↓↓↓↓↓↓↓是永久挂载</span><br></pre></td></tr></table></figure><p>执行了上面的操作后，重启就会丢失，这时需要一些操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;fstab </span><br><span class="line">仿照添加刚才的硬盘</span><br><span class="line">mount -a</span><br></pre></td></tr></table></figure><h3 id="卸载分区"><a href="#卸载分区" class="headerlink" title="卸载分区"></a>卸载分区</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount 硬盘设备名（/dev/sdb1）</span><br></pre></td></tr></table></figure><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><h3 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h3><ol><li><p>整体情况查询</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -lh</span><br></pre></td></tr></table></figure></li><li><p>指定目录查询</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">du -h 目录</span><br><span class="line">    常用选项：</span><br><span class="line">        -s 指定目录占用大小汇总</span><br><span class="line">        -h 带计量单位</span><br><span class="line">        -a 含文件</span><br><span class="line">        --max-depth=1 子目录的深度</span><br><span class="line">        -c 增加汇总值</span><br><span class="line">    通常为 -ach</span><br></pre></td></tr></table></figure></li><li><p>查询文件夹下的文件个数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l &#x2F;home&#x2F;ciaran | grep “^—” | wc -l</span><br></pre></td></tr></table></figure></li><li><p>查询文件夹下的目录个数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l &#x2F;home&#x2F;ciaran | grep “^d” | wc -l</span><br></pre></td></tr></table></figure></li><li><p>查询文件夹下的文件个数（包括子文件夹）</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lR &#x2F;home&#x2F;ciaran | grep “^d” | wc -l</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程</title>
      <link href="/2020/01/13/java-fu-xi/duo-xian-cheng/"/>
      <url>/2020/01/13/java-fu-xi/duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>面试经常问的问题：1，线程创建方式<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<br>2，线程同步</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="1-程序，进程，线程"><a href="#1-程序，进程，线程" class="headerlink" title="1.程序，进程，线程"></a>1.程序，进程，线程</h3><p><strong>程序</strong>（program）：完成特定任务、用某种语言编写的一组指令的集合.<br><strong>进程</strong>（process）：程序的一次执行，或是正在运行的程序。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">程序是静态的，进程是动态的</span><br></pre></td></tr></table></figure><p><strong>线程</strong>（thread）：进程进一步细化为线程，是一个程序的内部执行路径。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">一个Java程序至少有三个线程：，main（）主线程，gc（）垃圾回收线程，异常处理线程</span><br></pre></td></tr></table></figure><h3 id="2-并行，并发"><a href="#2-并行，并发" class="headerlink" title="2.并行，并发"></a>2.并行，并发</h3><p><strong>并行</strong>：多个CPU同时执行多个任务<br><strong>并发</strong>：一个cpu执行多个任务（时间片分配）</p><h2 id="线程的创建"><a href="#线程的创建" class="headerlink" title="线程的创建"></a>线程的创建</h2><ol><li><p>继承于Thread类  </p><ol><li><p>创建一个继承Thread类的子类</p></li><li><p>重写run（）方法 （线程执行的操作写入方法中）</p></li><li><p>通过子类的对象的start（）方法（①启动当前线程②调用当前线程的run方法）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意，此时不可调用run方法，否则不能使用创建的线程类，仍然是main线程，且该线程的start（）方法只能执行一次。</span><br></pre></td></tr></table></figure><p>变形一下，通过匿名子类的方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Thread()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.start();</span><br></pre></td></tr></table></figure></li></ol></li><li><p>实现Runnable接口</p><ol><li>创建一个实现Runnable接口的实现类</li><li>实现run（）方法</li><li>创建实现类对象，将实现类对象作为参数传入Thread类中</li><li>通过start（）调用run（）方法</li></ol></li><li><p>实现Callable接口  </p><ol><li>创建一个实现Callable接口的实现类</li><li>实现call（）方法</li><li>创建实现类对象，将实现类对象作为参数传入FutureTask类中，再将FutureTask类对象传入Thread中。</li><li>通过start（）调用run（）方法</li><li>通过FutureTask类对象的get（）方法获取返回值，还可以跑出异常</li></ol></li><li><p>线程池<br> java语言虽然内置了多线程支持，启动一个新线程非常方便，但是，创建线程需要操作系统资源（线程资源，栈空间等），频繁创建和销毁大量线程需要消耗大量时间。如果可以复用一组线程，那么我们就可以把很多小任务让一组线程来执行，而不是一个任务对应一个新线程。这种能接收大量小任务并进行分发处理的就是线程池。</p><p> 简单地说，线程池内部维护了若干个线程，没有任务的时候，这些线程都处于等待状态。如果有新任务，就分配一个空闲线程执行。如果所有线程都处于忙碌状态，新任务要么放入队列等待，要么增加一个新线程进行处理。</p><p> Java标准库提供了ExecutorService接口表示线程池，它的典型用法如下：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建固定大小的线程池:</span></span><br><span class="line">ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 提交任务:</span></span><br><span class="line">service.submit(task1);<span class="comment">//适用于Callable接口</span></span><br><span class="line">service.excute（task2）<span class="comment">//适用于Runnable接口</span></span><br></pre></td></tr></table></figure><p> 因为ExecutorService只是接口，Java标准库提供的几个常用实现类有：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FixedThreadPool：线程数固定的线程池；</span><br><span class="line">CachedThreadPool：线程数根据任务动态调整的线程池；</span><br><span class="line">SingleThreadExecutor：仅单线程执行的线程池。</span><br></pre></td></tr></table></figure></li></ol><h3 id="比较两者"><a href="#比较两者" class="headerlink" title="比较两者"></a>比较两者</h3><p>两者实现的方式内部不同。<br>继承的方式不是太好，类直接的显示含义基本没有，比如卖票的ticket继承thread，两者没有联系；且java为单继承。</p><p>实现的方式天然有共享数据，而且可以多实现。</p><p>所以优先选择实现方式。</p><h3 id="线程优先级"><a href="#线程优先级" class="headerlink" title="线程优先级"></a>线程优先级</h3><p>最大是10，最小1，默认5</p><ul><li>getPriority()</li><li>setPriority(int p)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">优先级高的线程高概率抢占cpu</span><br></pre></td></tr></table></figure><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><ul><li>currentThread()：返回当前线程，静态方法</li><li>getName()：返回当前线程名字</li><li>setName()：设当前线程的名字</li><li>yield（）：释放当前cpu使用权</li><li>join（）：指定线程获取cpu使用权，使用完才归还</li><li>sleep（long million）：休眠多少毫秒，静态方法</li><li>isAlive（）：返回线程是否存活</li></ul><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p>在Java程序中，一个线程对象只能调用一次start()方法启动新线程，并在新线程中执行run()方法。一旦run()方法执行完毕，线程就结束了。因此，Java线程的状态有以下几种：</p><ul><li>New：新创建的线程，尚未执行；  </li><li>Runnable：运行中的线程，正在执行run()方法的Java代码；  </li><li>Blocked：运行中的线程，因为某些操作被阻塞而挂起；  </li><li>Waiting：运行中的线程，因为某些操作在等待中；  </li><li>Timed Waiting：运行中的线程，因为执行sleep()方法正在计时等待；  </li><li>Terminated：线程已终止，因为run()方法执行完毕。  </li></ul><h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><p>当多个线程同时运行时，线程的调度由操作系统决定，程序本身无法决定。因此，任何一个线程都有可能在任何指令处被操作系统暂停，然后在某个时间段后继续执行。</p><p>这个时候，有个单线程模型下不存在的问题就来了：如果多个线程同时读写共享变量，会出现数据不一致的问题。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li><p>同步代码块  </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> (同步监视器)&#123;</span><br><span class="line">    <span class="comment">//需要同步的代码</span></span><br><span class="line">    <span class="comment">//操作共享数据的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 同步监视器：俗称’锁‘，任何类的对象都可以充当’锁‘；多个线程必须共用同一把锁。<br> 常用的锁：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">实现的方式：</span><br><span class="line">    synchronized (this)</span><br><span class="line">继承的方式：</span><br><span class="line">    synchronized (当前类.class)</span><br></pre></td></tr></table></figure><p> <strong>效率会降低</strong></p></li><li><p>同步方法<br> 我们知道Java程序依靠synchronized对线程进行同步，使用synchronized的时候，锁住的是哪个对象非常重要。<br> 让线程自己选择锁对象往往会使得代码逻辑混乱，也不利于封装。更好的方法是把synchronized逻辑封装起来。</p></li><li><p>同步锁<br> Java 5开始，引入了一个高级的处理并发的java.util.concurrent包，它提供了大量更高级的并发功能，能大大简化多线程程序的编写。<br> 我们知道Java语言直接提供了<strong>synchronized</strong>关键字用于加锁，但这种锁一是很重，二是获取时必须一直等待，没有额外的尝试机制。<br> java.util.concurrent.locks包提供的<strong>ReentrantLock</strong>用于替代<strong>synchronized</strong>加锁。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count += n;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h3><p>在获取多个锁的时候，不同线程获取多个不同对象的锁可能导致死锁。<br>此时，两个线程各自持有不同的锁，然后各自试图获取对方手里的锁，造成了双方无限等待下去，这就是死锁。<br>死锁发生后，没有任何机制能解除死锁，只能强制结束JVM进程。<br>因此，在编写多线程应用时，要特别注意防止死锁。因为死锁一旦形成，就只能强制结束进程。</p><h2 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h2><ul><li>wait（）：使当前线程进入阻塞状态，会释放同步监视器（锁）</li><li>notify（）：唤醒另一个优先级高线程</li><li>notifyAll（）：唤醒其它所有线程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.以上三个方法必须使用在同步代码块或同步方法中</span><br><span class="line">2.以上三个方法的调用者必须是同步监视器</span><br><span class="line">3.以上三个方法定义在java.lang.Object中</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实时任务调度</title>
      <link href="/2020/01/12/linux-xue-xi/shi-cao-pian/shi-shi-ren-wu-diao-du/"/>
      <url>/2020/01/12/linux-xue-xi/shi-cao-pian/shi-shi-ren-wu-diao-du/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>任务调度是指系统在某个时间执行的特定程序或命令。任务调度的分类：</p><ol><li>系统工作：有些重要工作必须周而复始的地执行。如病毒扫描。</li><li>个别用户工作：个别用户希望执行的工作。</li></ol><a id="more"></a><h2 id="crontab指令"><a href="#crontab指令" class="headerlink" title="crontab指令"></a>crontab指令</h2><p>基本语法：crontab [选项]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">常用的选项：</span><br><span class="line">    -e 编辑定时任务</span><br><span class="line">    -l 查询定时任务</span><br><span class="line">    -r 删除定时任务</span><br></pre></td></tr></table></figure><p>如果只是简单的指令，直接加入crontab任务即可；对于复杂的指令，需要编写脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">相关指令:</span><br><span class="line">    crontab -r :终止任务调度</span><br><span class="line">    crontab -l :列出当前任务调度</span><br><span class="line">    service crontab restart :重启任务调度</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组管理与权限管理</title>
      <link href="/2020/01/11/linux-xue-xi/shi-cao-pian/zu-guan-li-yu-quan-xian-guan-li/"/>
      <url>/2020/01/11/linux-xue-xi/shi-cao-pian/zu-guan-li-yu-quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>linxu用户至少属于一个组，每个文件有所有者、所在组和其它组。<br><strong>劳劳车马未离鞍，临事方知一死难； 三百年来伤国步，八千里路吊民残。  秋风宝剑孤臣泪，落日征旗大将坛， 寰海尘氛纷未已，诸君莫作等闲看</strong></p><a id="more"></a><h2 id="所有者"><a href="#所有者" class="headerlink" title="所有者"></a>所有者</h2><p>一般该用户创建了文件，用户就是文件的所有者</p><h3 id="查看文件所有者"><a href="#查看文件所有者" class="headerlink" title="查看文件所有者"></a>查看文件所有者</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl</span><br></pre></td></tr></table></figure><h3 id="修改文件所有者"><a href="#修改文件所有者" class="headerlink" title="修改文件所有者"></a>修改文件所有者</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件名</span><br></pre></td></tr></table></figure><h2 id="所在组"><a href="#所在组" class="headerlink" title="所在组"></a>所在组</h2><p>一般该用户创建了文件，用户所在组就是文件所在组</p><h3 id="查看文件所在组"><a href="#查看文件所在组" class="headerlink" title="查看文件所在组"></a>查看文件所在组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl</span><br></pre></td></tr></table></figure><h3 id="修改文件所在组"><a href="#修改文件所在组" class="headerlink" title="修改文件所在组"></a>修改文件所在组</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp 组名 文件名</span><br></pre></td></tr></table></figure><h2 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h2><p>除去文件的所有者和所在组的用户外，系统的其它用户都是文件的其他组</p><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><p>一个文件的权限如下图所示：<br><img src="https://s2.ax1x.com/2020/01/12/loSJOS.png" alt="loSJOS.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第1个字符：</span><br><span class="line">    “-” 表示普通文件</span><br><span class="line">    “d” 表示目录</span><br><span class="line">    “l” 表示软连接</span><br><span class="line">    “c” 表示字符设备（键盘、鼠标等）</span><br><span class="line">    “b” 表示快文件，硬盘</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">第2-4字符：（表示所有者的权限）</span><br><span class="line">    普通文件：</span><br><span class="line">        r：读文件的权限</span><br><span class="line">        w：写文件的权限，但不代表可以删除（前提是对该文件所在目录有写的权限才可以）</span><br><span class="line">        x：执行文件的权限</span><br><span class="line">        -：无此权限</span><br><span class="line">    目录：</span><br><span class="line">        r：读取的权限，ls查看目录内容</span><br><span class="line">        w：可以修改，目录内创建+删除+重命名目录</span><br><span class="line">        x：进入目录的权限</span><br><span class="line">        -：无此权限</span><br><span class="line">    rwx可以用数字代替，r&#x3D;4，w&#x3D;1，x&#x3D;1</span><br><span class="line">第5-7字符;(文件所在组的用户的权限)</span><br><span class="line">第8-10字符：（其他组的用户的权限 ）</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第11个字符：（数字）</span><br><span class="line">    普通文件：硬链接</span><br><span class="line">    目录：表示子目录的个数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">接下来分别表示：</span><br><span class="line">    所有者、所在组、文件大小（目录同一为4096）、文件最后的修改时间、文件名</span><br></pre></td></tr></table></figure><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><ol><li><p>通过+，-，=的方式变更权限</p><ul><li><p>u：所有者</p></li><li><p>g：所在组</p></li><li><p>o：其它用户</p></li><li><p>a：全部用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u&#x3D;rwx g&#x3D;rx o&#x3D;r 文件或目录名 (设置权限)</span><br><span class="line">chmod o+w 文件或目录名 （增加权限）</span><br><span class="line">chmod a-r 文件或目录名 （减少权限  ）</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过数字变更权限</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 751 文件或目录名 (设置权限)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用指令</title>
      <link href="/2020/01/10/linux-xue-xi/shi-cao-pian/chang-yong-zhi-ling/"/>
      <url>/2020/01/10/linux-xue-xi/shi-cao-pian/chang-yong-zhi-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>总结常用的Linux指令<br><strong>说书唱戏劝人方，三条大道走中央，善恶到头终有报，人间正道是沧桑</strong></p><a id="more"></a><h2 id="指令运行级别类"><a href="#指令运行级别类" class="headerlink" title="指令运行级别类"></a>指令运行级别类</h2><p>配置文件在<strong>/etc/inittab</strong><br>设计了七个运行级别：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0：关机</span><br><span class="line">1：单用户（找回丢失密码）</span><br><span class="line">2：多用户无网络服务</span><br><span class="line">3：多用户有网络服务</span><br><span class="line">4：保留</span><br><span class="line">5：图形界面</span><br><span class="line">6：重启</span><br></pre></td></tr></table></figure><h3 id="切换运行级别"><a href="#切换运行级别" class="headerlink" title="切换运行级别"></a>切换运行级别</h3><p>基本语法：init 012356 选一个</p><h3 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h3><p>思路：进入单用户模式，然后修改密码。因为单用户模式，root不需要面膜就可以登录。<br>在开机界面，按“e”编辑grub文件，在按“e”编辑内核，输入1，进入单用户模式，执行passwd root，进行修改密码。<br><strong>注意！！！！！</strong><br><strong>只能在本机上操作，不可远程操作</strong></p><h2 id="帮助指令类"><a href="#帮助指令类" class="headerlink" title="帮助指令类"></a>帮助指令类</h2><p>对某个指令不熟悉时，可使用Linux提供的帮助指令来加深理解并使用</p><h3 id="1-man"><a href="#1-man" class="headerlink" title="1.man"></a>1.man</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本语法：man 指令或配置文件</span><br></pre></td></tr></table></figure><h3 id="2-help"><a href="#2-help" class="headerlink" title="2.help"></a>2.help</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">基本语法：help 指令（获得shell内置指令的帮助信息）</span><br></pre></td></tr></table></figure><h3 id="3-百度一下"><a href="#3-百度一下" class="headerlink" title="3.百度一下"></a>3.百度一下</h3><h2 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h2><ul><li>pwd (显示当前目录的绝对路径)</li><li>ls [选项] [目录或是文件]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可用的选项：</span><br><span class="line">  a 显示当前目录所有的文件和目录，包括隐藏文件</span><br><span class="line">  -l 以列表的方式显示信息</span><br></pre></td></tr></table></figure><ul><li>mkdir [选项] 目录名  （创建一个目录）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可用的选项：  </span><br><span class="line">  -p 创建多级目录</span><br></pre></td></tr></table></figure><ul><li>rmkdir [选项] 目录名 （删除一个空目录）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可用的选项：  </span><br><span class="line">  -p 创建多级目录</span><br></pre></td></tr></table></figure><ul><li>rm -rf             （删除非空目录）  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">可用的选项：  </span><br><span class="line">  -p 创建多级目录</span><br></pre></td></tr></table></figure><ul><li>touch 文件名 （创建空文件）</li><li>cp [选项] 文件或目录名 目的目录 （复制文件或目录）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可用的选项：  </span><br><span class="line">  -r 递归复制整个文件夹</span><br><span class="line">  -f 强制复制</span><br></pre></td></tr></table></figure><p><strong>！！！！！！复制强制覆盖也可以使用\p</strong></p><ul><li>rm [选项] 文件或目录名（移除文件或目录）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可用的选项：</span><br><span class="line">  -r  递归移除整个文件夹</span><br><span class="line">  -f  强制删除</span><br></pre></td></tr></table></figure><ul><li>mv 旧文件名 新文件名 （重命名）</li><li>mv 旧目录 新目录 （移动文件）</li><li>cat [选项] 文件名 （查看文件内容</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可用的选项：  </span><br><span class="line">  -n  显示行号</span><br><span class="line">  cat [选项] 文件 | more （分页显示，空格下一页）</span><br></pre></td></tr></table></figure><ul><li>more 文件名 （分屏查看文件）<br><a href="https://imgchr.com/i/l5KlDA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/11/l5KlDA.png" alt="l5KlDA.png"></a></li><li>less 文件名 （分屏查看文件，与more类似，但是更强大）<br>与more的区别就是不是一次加载文件，而是根据显示的需求才加载，对显示大文件的效率较高。<br><a href="https://imgchr.com/i/l5K8Et" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/11/l5K8Et.png" alt="l5K8Et.png"></a></li><li>&gt; 输出重定向 和 &gt;&gt; 追加<ul><li>ls -l &gt; 文件 （列表的内容写入文件中，覆盖写）</li><li>ls -al &gt;&gt; 文件 （列表的内容追加到文件末尾）</li><li>cat 文件1 &gt; 文件2（文件1的内容覆盖到文件2）</li><li>echo “内容” &gt;&gt; 文件</li></ul></li><li>echo [选项] 输出的内容 （输出内容到控制台）  </li><li>head 文件名（查看文件头十行的内容）</li><li>head -n 5 文件名（查看文件头5行的内容）</li><li>tail 文件名（查看文尾十行的内容）</li><li>tail -n 5 文件名（查看文件尾5行的内容）</li><li>tail -f 文件名（实时追踪该文档的所有更新）</li><li>ln -s [原文件或目录] [软连接名] （给原文件创一个软连接）</li><li>history （显示最近使用过的指令）<ul><li>默认显示所有的历史指令</li><li>history 10 （显示最近十个指令）</li><li>！77 （执行第77个历史指令）</li></ul></li></ul><h2 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h2><ul><li>date指令（显示当前日期）<ul><li>date （显示当前日期）</li><li>date + %Y (显示当前年份)</li><li>date + %m (显示当前月份)</li><li>date + %d (显示当前日)</li><li>date + %H (显示当前时)</li><li>date + %M (显示当前分)</li><li>date + %S (显示当前秒)</li><li>date -s 字符串时间 （设置当前时间）</li></ul></li><li>cal指令 （显示日历信息）<ul><li>cal [选项] （不加选项，显示本月日历）</li><li>cal 2020 （显示2020年的日历）  </li></ul></li></ul><h2 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h2><ul><li>find指令（从指定目录向下递归遍历其各个子目录，将满足条件的文件或目录显示在终端）<ul><li>find [搜索范围] [选项]</li><li>find 搜索范围 -name 文件名 （按文件名在范围内查找）</li><li>find 搜索范围 -user 用户名 （按文件的拥有者在范围内查找）</li><li>find 搜索范围 -size 空白（+，-） 大小 （查找文件等于、大于或小于指定大小的文件）</li><li>可以使用通配符来查找</li></ul></li><li>locat指令 （快速定位文件路径）<ul><li>locate 搜索文件名</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">特别说明：由于locate基于数据库进行查询，所以第一个运行前，必须使用updatedb指令创建locate数据库.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">管道符号，“|”，表示将前一个命令的处理结果输出传递给后一个命令处理</span><br></pre></td></tr></table></figure><ul><li>grep指令 （按照文件内容进行查找）<ul><li>grep [选项] 查找内容 原文件</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可用选项：</span><br><span class="line">  -n 显示匹配行和行号</span><br><span class="line">  -i 忽略字母大小写</span><br></pre></td></tr></table></figure><h2 id="压缩与解压缩类"><a href="#压缩与解压缩类" class="headerlink" title="压缩与解压缩类"></a>压缩与解压缩类</h2><h3 id="1-gzip与gunzip指令"><a href="#1-gzip与gunzip指令" class="headerlink" title="1.gzip与gunzip指令"></a>1.gzip与gunzip指令</h3><ul><li>gzip 文件名 （将文件压缩为.gz文件，源文件不保留）</li><li>gunzip 文件名.gz （将.gz文件解压缩）</li></ul><h3 id="2-zip与unzip指令"><a href="#2-zip与unzip指令" class="headerlink" title="2.zip与unzip指令"></a>2.zip与unzip指令</h3><ul><li>zip [选项] xxx.zip 将要压缩的内容 （将内容压缩为xxx.zip）</li><li>unzip [选项] xxx.zip （将xxx.zip解压缩）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip常用选项：</span><br><span class="line">  -r 递归压缩</span><br><span class="line">unzip常用选项：</span><br><span class="line">  -d&lt;目录&gt; 指定解压缩后存放的目录</span><br></pre></td></tr></table></figure><h3 id="tar指令-（打包指令）"><a href="#tar指令-（打包指令）" class="headerlink" title="tar指令 （打包指令）"></a>tar指令 （打包指令）</h3><p>tar [选项] xxx.tar.gz 打包的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用选项：</span><br><span class="line">  -c 产生.tar文件</span><br><span class="line">  -v 显示详细信息</span><br><span class="line">  -f 指定压缩后的文件名</span><br><span class="line">  -z 打包同时压缩</span><br><span class="line">  -x 解包.tar文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>具体操作.md</title>
      <link href="/2020/01/10/linux-xue-xi/shi-cao-pian/ju-ti-cao-zuo/"/>
      <url>/2020/01/10/linux-xue-xi/shi-cao-pian/ju-ti-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><h2 id="连接远程服务器"><a href="#连接远程服务器" class="headerlink" title="连接远程服务器"></a>连接远程服务器</h2><p>ssh <a href="mailto:root@47.93.24.123">root@47.93.24.123</a> -p 22</p><p><a href="https://www.cnblogs.com/ldmemory/p/6692342.html" target="_blank" rel="noopener">ftp上传文件</a></p><h2 id="vi与vim编辑器"><a href="#vi与vim编辑器" class="headerlink" title="vi与vim编辑器"></a>vi与vim编辑器</h2><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>vi编辑器Linux基本上上都会内置，vim可以看做vi的增强版，具有程序编辑的能力。</p><h3 id="三种模式"><a href="#三种模式" class="headerlink" title="三种模式"></a>三种模式</h3><ol><li>正常模式<br> 这是默认的模式，就是我们平常使用的模式，可以使用快捷键</li><li>插入模式（编辑模式）<br> 可以输入模式，按下i,I,o,O,a,A,r,R等任何一个字母都可以进入编辑模式，一般为i。</li><li>命令行模式<br> 提供相应的指令，完成读盘，存盘，替换，离开vim等动作。<br><a href="https://imgchr.com/i/lhgRJK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/10/lhgRJK.md.png" alt="lhgRJK.md.png"></a></li></ol><h4 id="快捷键的使用"><a href="#快捷键的使用" class="headerlink" title="快捷键的使用"></a>快捷键的使用</h4><p>均为正常模式的快捷键</p><ul><li>yy 拷贝光标当前行，5yy拷贝光标向下5行</li><li>p 粘贴</li><li>dd 删除光标当前行，5dd删除光标当前向下5行</li><li>/关键字 回车查询，n查找下一个</li><li>：set nu设置行号，：set nonu取消行号</li><li>G 文档的最末行，gg 文档首行</li><li>u 撤销</li><li>20 shift+g 光标移动到20行</li></ul><h2 id="开机、重启和注销"><a href="#开机、重启和注销" class="headerlink" title="开机、重启和注销"></a>开机、重启和注销</h2><ul><li>shutdown -h now 立刻进行关机</li><li>shutdown -h 1 一分钟后进行关机</li><li>shutdown -r now 现在重新启动计算机</li><li>halt 和上面一样，等同于关机</li><li>reboot 重启计算机</li><li>sync 将内存的数据同步到磁盘，建议关机之前进行操作</li><li>logout 退出当前用户登录</li></ul><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>Linux是一个多用户多任务的操作系统，用户至少要属于一个组</p><ul><li>添加用户<br>   useradd 用户名（默认创建同名的组，并置于旗下）<br>   useradd -d 指定目录 用户名</li><li>修改密码<br>  passwd 用户名</li><li>删除用户<br>  userdel 用户名（默认保留家目录下的用户目录）<br>  userdel -r 用户名 （用户目录也删除）</li><li>查询用户信息<br>  id 用户名</li><li>切换用户<br>  su-用户名（切换带更高级别的用户）<br>  返回原用户使用<strong>exit</strong>指令</li><li>查看当前用户<br>  who am i</li></ul><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><p>系统可以对有共性的用户进行统一管理</p><ul><li>新增组<br>  groupadd 组名</li><li>删除组<br>  groupdel 组名</li><li>增加用户直接指定组<br>  useradd -g 组名 用户名</li><li>修改用户组<br>  usermod -g 组名 用户名</li></ul><h2 id="用户与用户组相关的文件"><a href="#用户与用户组相关的文件" class="headerlink" title="用户与用户组相关的文件"></a>用户与用户组相关的文件</h2><ul><li>/etc/passwd<br>  用户配置文件</li><li>/etc/shadow<br>  口令配置文件（加密的密码与登录信息）</li><li>/etc/group<br>  用户组的配置文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目录结构.md</title>
      <link href="/2020/01/10/linux-xue-xi/ji-chu-pian/mu-lu-jie-gou-md/"/>
      <url>/2020/01/10/linux-xue-xi/ji-chu-pian/mu-lu-jie-gou-md/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux的文件系统是采用级层式的树形结构，最上册是‘/’根目录，然后在此目录下创建其他目录。<br><strong>Linux的世界里，一切皆文件</strong></p><a id="more"></a><h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p><a href="https://imgchr.com/i/lfo3jK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/10/lfo3jK.md.png" alt="lfo3jK.md.png"></a></p><h2 id="具体介绍"><a href="#具体介绍" class="headerlink" title="具体介绍"></a>具体介绍</h2><ul><li><p><strong>/bin目录</strong>（/usr/bin,/usr/local/bin）是binary的缩写，存放着最常用的命令</p></li><li><p><strong>/sbin目录</strong>（/usr/sbin,/usr/local/sbin），存放着系统管理员的系统管理程序。</p></li><li><p><strong>/home目录</strong>，存放普通用户的主目录，每个用户都有自己的目录。</p></li><li><p><strong>/root目录</strong>，超级权限者的户主目录。</p></li><li><p><strong>/lib目录</strong>，系统所需要的动态连接共享库</p></li><li><p><strong>/lost+found目录</strong>，非法关机后存放目录。</p></li><li><p><strong>/etc目录</strong>，所有系统文件所需要的配置文件和子目录</p></li><li><p><strong>/usr目录</strong>，用户的应用程序和文件目录。</p></li><li><p><strong>/boot目录</strong>，启动Linux使用的一些核心文件。</p></li><li><p><strong>/proc目录</strong>，是一个虚拟目录，存放系统信息。</p></li><li><p><strong>/srv目录</strong>，服务启动所需要提取的文件。</p></li><li><p><strong>/tmp目录</strong>，存放临时文件。</p></li><li><p><strong>/sys目录</strong>，系统核心文件。</p></li><li><p><strong>/dev目录</strong>，设备管理文件，将硬件映射为文件。</p></li><li><p><strong>/media目录</strong>，识别的设备挂载到此目录，比如U盘。</p></li><li><p><strong>/mnt目录</strong>，让用户临时挂载别的文件系统。</p></li><li><p><strong>/opt目录</strong>，额外安装软件所摆放的目录。</p></li><li><p><strong>/usr/local目录</strong>，另一个主题安装软件摆放的目录，通常为编译源码方式安装方法的存放目录。</p></li><li><p><strong>/var目录</strong>，存放不断扩充的文件，比如日志文件。</p></li><li><p><strong>/seLinux目录</strong>，安全子系统，控制程序只能访问特定的文件。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开山篇.md</title>
      <link href="/2020/01/09/linux-xue-xi/ji-chu-pian/kai-shan-pian-md/"/>
      <url>/2020/01/09/linux-xue-xi/ji-chu-pian/kai-shan-pian-md/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>寒假安装了几个Linux发行版，有openSUSE、manjaro（kde、gnome，xfce）、nitrux和elementrayos，几经折腾后，还是选择了邪教–manjaro。之后就想系统地学习一下Linux，打算Linux做主力系统的，就在尚硅谷的官网找到了视频，学习一下。</p><a id="more"></a><h2 id="内容介绍"><a href="#内容介绍" class="headerlink" title="内容介绍"></a>内容介绍</h2><p><a href="https://imgchr.com/i/lWbCm8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lWbCm8.md.png" alt="lWbCm8.md.png"></a></p><h2 id="学习流程"><a href="#学习流程" class="headerlink" title="学习流程"></a>学习流程</h2><ol><li><p>Linux环境下的基本操作，包括文件操作、编辑工具使用和Linux用户管理等。</p></li><li><p>Linux的各种配置（环境变量、网络配置）</p></li><li><p>搭建开发环境</p></li><li><p>编写shell脚本</p></li><li><p>进行安全设置</p></li><li><p>深入了解Linux（对内核有所了解）</p></li></ol><h2 id="Unix与Linux"><a href="#Unix与Linux" class="headerlink" title="Unix与Linux"></a>Unix与Linux</h2><p><a href="https://imgchr.com/i/lfiZOe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lfiZOe.md.png" alt="lfiZOe.md.png"></a><br><a href="https://imgchr.com/i/lfi3Sf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lfi3Sf.md.png" alt="lfi3Sf.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea的使用</title>
      <link href="/2020/01/08/jetbrians/"/>
      <url>/2020/01/08/jetbrians/</url>
      
        <content type="html"><![CDATA[<h2 id="jetbrains的一些相关操作"><a href="#jetbrains的一些相关操作" class="headerlink" title="jetbrains的一些相关操作"></a>jetbrains的一些相关操作</h2><a id="more"></a><h2 id="hosts文件"><a href="#hosts文件" class="headerlink" title="hosts文件"></a>hosts文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.2.3.4 account.jetbrains.com</span><br><span class="line">1.2.3.4 http:&#x2F;&#x2F;www.jetbrains.com</span><br><span class="line">1.2.3.4 www-weighted.jetbrains.com</span><br><span class="line">0.0.0.0 account.jetbrains.com</span><br></pre></td></tr></table></figure><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><ul><li>外观主题：material theme ui</li><li>字体:source code pro medium</li><li>大小：20</li><li>设置ctrl+鼠标调节字体大小（位于editor&gt;general的顶部）<br><a href="https://imgchr.com/i/lgB1KO" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/08/lgB1KO.md.png" alt="lgB1KO.md.png"></a></li><li>展示方法的用途：documents（位于editor&gt;general的底部）<br><a href="https://imgchr.com/i/lgB8qe" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/08/lgB8qe.png" alt="lgB8qe.png"></a></li><li>添加方法间的分割线<br><a href="https://imgchr.com/i/lgBQxK" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/08/lgBQxK.png" alt="lgBQxK.png"></a></li><li>忽略大小匹配—-取出match case的勾选</li><li>让顶部的打开文件过多时多行显示<br><img src="https://s2.ax1x.com/2020/01/08/lgDuwQ.png" alt="lgDuwQ.png"></li><li>修改注释的字体相关<br><img src="https://s2.ax1x.com/2020/01/08/lgDzpq.png" alt="lgDzpq.png"></li><li>新建文件的生成注释<br><img src="https://s2.ax1x.com/2020/01/08/lgsAr8.png" alt="lgsAr8.png"></li><li>设置自动编译<br><img src="https://s2.ax1x.com/2020/01/08/lgsQx0.png" alt="lgsQx0.png"></li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p><a href="https://imgchr.com/i/lRD86P" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lRD86P.md.png" alt="lRD86P.md.png"></a><br><a href="https://imgchr.com/i/lRD1SI" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lRD1SI.md.png" alt="lRD1SI.md.png"></a><br><a href="https://imgchr.com/i/lRDGOf" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lRDGOf.png" alt="lRDGOf.png"></a><br><a href="https://imgchr.com/i/lRD3lt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lRD3lt.md.png" alt="lRD3lt.md.png"></a><br><a href="https://imgchr.com/i/lRDQfA" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lRDQfA.md.png" alt="lRDQfA.md.png"></a><br><a href="https://imgchr.com/i/lRDYm8" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lRDYm8.md.png" alt="lRDYm8.md.png"></a><br><a href="https://imgchr.com/i/lRDt0S" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/09/lRDt0S.md.png" alt="lRDt0S.md.png"></a></p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><table><thead><tr><th align="center">名称</th><th>快捷键</th></tr></thead><tbody><tr><td align="center">代码提示</td><td>Ctrl+ 空格</td></tr><tr><td align="center">参数提示</td><td>Ctrl+ p</td></tr><tr><td align="center">代码包围</td><td>Ctrl+ alt+t</td></tr><tr><td align="center">抽取方法</td><td>Ctrl+ alt+m</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> -软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冲动是魔鬼</title>
      <link href="/2020/01/05/a-li-yun/"/>
      <url>/2020/01/05/a-li-yun/</url>
      
        <content type="html"><![CDATA[<h2 id="啰嗦"><a href="#啰嗦" class="headerlink" title="啰嗦"></a>啰嗦</h2><p>一大早起来就冲动消费，显示域名买错了，接着云服务器也没错了，查了一下，域名很明显不能退款，但是服务器刚了一波客服，成功退款了.（感觉说啥也没说就退了，难道是家大业大？，不在乎这点蚊子腿肉？）</p><p><a href="https://imgchr.com/i/lDkNvt" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/01/05/lDkNvt.md.png" alt="lDkNvt.md.png"></a></p><p>感觉阿里服务还是可以的，仅凭它给我退款了，不欺诈学生。</p><p>一顿操作之后，发现还是hexo搞头比较多，又换回了hexo，放弃了WordPress。服务器作为学Java的工具吧。</p>]]></content>
      
      
      <categories>
          
          <category> -日常 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -阿里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github相关指令</title>
      <link href="/2020/01/04/github-xiang-guan-cao-zuo/"/>
      <url>/2020/01/04/github-xiang-guan-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="第一次提交远程仓库"><a href="#第一次提交远程仓库" class="headerlink" title="第一次提交远程仓库"></a>第一次提交远程仓库</h3><p>切换到要提交的文件根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin https://github.com/ciaranhunt/test3.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支"><a href="#更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支" class="headerlink" title="更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支"></a>更新被拒绝，因为您当前分支的最新提交落后于其对应的远程分支</h4><p>解决方案：需要先获取远端更新并与本地合并,再git push</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/miaoihan/weibo.git</span><br><span class="line">git fetch origin //获取远程更新</span><br><span class="line">git merge origin/master //把更新的内容合并到本地分支</span><br></pre></td></tr></table></figure><p>上面的名字，和*.git改成自己的</p>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一切都是对象</title>
      <link href="/2020/01/02/java-fu-xi/dui-xiang/"/>
      <url>/2020/01/02/java-fu-xi/dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>“如果我们说另一种不同的语言,那么我们就会发觉一个有些不同的世界.”<br>–Luduing Wittgerstein</p><a id="more"></a><h2 id="用引用操纵对象"><a href="#用引用操纵对象" class="headerlink" title="用引用操纵对象"></a>用引用操纵对象</h2><p>尽管一切都看作对象,但操纵的标识符实际上时是对象的“引用”.</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><table><thead><tr><th align="center">基本类型</th><th>大小</th><th>最小值</th><th>最大值</th><th>包装类型</th></tr></thead><tbody><tr><td align="center">boolean</td><td>无</td><td>无</td><td>无</td><td>Boolean</td></tr><tr><td align="center">int</td><td>无</td><td>无</td><td>无</td><td>Boolean</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给你的manjaro清理空间腾出地方！</title>
      <link href="/2020/01/02/manjaro-qing-li-kong-jian/"/>
      <url>/2020/01/02/manjaro-qing-li-kong-jian/</url>
      
        <content type="html"><![CDATA[<p>使用Arch Linux 时间长了，空间越来越少，不禁想到要清理一下空间。 我将清理的内容分成三部分，清理安装包缓存，清理孤立的软件包，以及清理日志。</p><a id="more"></a><h2 id="清理安装包缓存"><a href="#清理安装包缓存" class="headerlink" title="清理安装包缓存"></a>清理安装包缓存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Scc</span><br></pre></td></tr></table></figure><p>不仅会删除未安装或旧版本的包文件缓存，也会将安装着的包的包文件缓存也一并删除。</p><h2 id="清理孤立的软件包"><a href="#清理孤立的软件包" class="headerlink" title="清理孤立的软件包"></a>清理孤立的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Rns $(pacman -Qtdq)</span><br></pre></td></tr></table></figure><p>就可以删除孤立的软件包。什么是孤立的软件包呢？比如我想要吃西餐，我需要买刀叉。刀叉即西餐的一个依赖，西餐依赖于刀叉。如果我再也不想要吃西餐了，那么已经买来的刀叉也没用了。这个刀叉即孤立的软件包。既然用不上了，那么可以删掉。</p><h2 id="清理日志"><a href="#清理日志" class="headerlink" title="清理日志"></a>清理日志</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">journalctl --vacuum-size=50M</span><br></pre></td></tr></table></figure><p>可以限制日志记录大小在50M，我使用一年没清理过，日志记录大概在2G左右。设置了固定大小为50M后，多的日志就会被删掉</p>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub如何配置SSH Key</title>
      <link href="/2020/01/02/githu-pei-zhi-ssh-key/"/>
      <url>/2020/01/02/githu-pei-zhi-ssh-key/</url>
      
        <content type="html"><![CDATA[<pre><code>https://github.com/ciaranhunt/ciaranhunt.github.io.gitgit@github.com:ciaranhunt/ciaranhunt.github.io.git</code></pre><p>这两个地址展示的是同一个项目，但是这两个地址之间有什么联系呢？<br>前者是<strong>https url</strong>直接有效网址打开，但是用户每次通过git提交的时候都要输入用户名和密码，有没有简单的一点的办法，一次配置，永久使用呢？当然，所以有了第二种地址，也就是<strong>SSH URL</strong>，那如何配置就是本文要分享的内容。<br>GitHub配置SSH Key的目的是为了帮助我们在通过git提交代码是，不需要繁琐的验证过程，简化操作流程。</p><a id="more"></a><h2 id="设置git的user-name和email"><a href="#设置git的user-name和email" class="headerlink" title="设置git的user name和email"></a>设置git的user name和email</h2><p>如果你是第一次使用，或者还没有配置过的话需要操作一下命令，自行替换相应字段。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span></span><br><span class="line">git config --global user.email  <span class="string">"your@example.com"</span></span><br></pre></td></tr></table></figure><p>说明：git config –list 查看当前Git环境所有配置，还可以配置一些命令别名之类的.</p><h2 id="检查是否存在SSH-Key"><a href="#检查是否存在SSH-Key" class="headerlink" title="检查是否存在SSH Key"></a>检查是否存在SSH Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br><span class="line">ls</span><br><span class="line">或者</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p>看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key<br><img src="https://s2.ax1x.com/2020/01/03/lUlBvR.png" alt="lUlBvR.png"><br>如果没有SSH Key，则需要先生成一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"571074750@qq.com"</span></span><br></pre></td></tr></table></figure><h2 id="获取SSH-Key"><a href="#获取SSH-Key" class="headerlink" title="获取SSH Key"></a>获取SSH Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/01/03/lUlyb6.png" alt="lUlyb6.png"></p><h2 id="GitHub添加SSH-Key"><a href="#GitHub添加SSH-Key" class="headerlink" title="GitHub添加SSH Key"></a>GitHub添加SSH Key</h2><ol><li>GitHub点击用户头像，选择setting</li><li>选择SSH and GPGkeys</li><li>新建一个SSH Key  </li></ol><p>取个名字，把之前拷贝的秘钥复制进去，添加就好啦。</p><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>测试是否成功配置SSH Key</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">//运行结果出现类似如下</span><br><span class="line">Hi xiangshuo1992! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Linux系统</title>
      <link href="/2020/01/02/linux-xue-xi/ji-chu-pian/an-zhuang-linux-xi-tong/"/>
      <url>/2020/01/02/linux-xue-xi/ji-chu-pian/an-zhuang-linux-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>考研之前就一直想装黑苹果,考完之后一顿折腾,每次进入安装界面都找不到磁盘,试了很多办法都不能奏效,只能作罢.作为开发人员,就想安装linux作为主力系统了.一开始感觉linux会比较难,就安装了deepin,装完之后感觉不太折腾,就安装了大名鼎鼎的<a href="https://manjaro.org/" target="_blank" rel="noopener">majaro</a>,美观有能折腾.</p><a id="more"></a><h2 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h2><p>可以参考官网给出的<a href="https://manjaro.org/support/firststeps/" target="_blank" rel="noopener">安装步骤</a>.<br><img src="https://s2.ax1x.com/2020/01/03/lUnMa4.png" alt="lUnMa4.png"></p><h3 id="下载系统镜像"><a href="#下载系统镜像" class="headerlink" title="下载系统镜像"></a>下载系统镜像</h3><p>进入官网可以找到镜像下载的地址<a href="https://manjaro.org/download/" target="_blank" rel="noopener">下载地址</a></p><h3 id="下载刻录工具"><a href="#下载刻录工具" class="headerlink" title="下载刻录工具"></a>下载刻录工具</h3><p>官方推荐<a href="https://rufus.ie/" target="_blank" rel="noopener">rufus</a>,而且官方和大部分博客都推荐dd刻录模式,但是我没找到,直接就刻录到U盘了,亲测可以安装成功.</p><h2 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h2><h3 id="进入安装程序"><a href="#进入安装程序" class="headerlink" title="进入安装程序"></a>进入安装程序</h3><pre><code>注意!!!最好是断网安装.</code></pre><p>进入BIOS修改启动项,讲U盘的UEFI放到第一个,接着就可以进入安装系统的程序.</p><pre><code>注意!!!!!双显卡的电脑一般会卡在1 watchdog: BUG: soft lockup -CPU#1 stuck for 23s![kworker/1:2:239]2 Started TLP system startup/shutdown3 A start job is running for livemedia mhwd scripe(xxxx)</code></pre><h4 id="修复办法"><a href="#修复办法" class="headerlink" title="修复办法"></a>修复办法</h4><ul><li>引导盘开机看到启动菜单的时候，用方向键移到BOOT那一栏。</li><li>按E进入编辑，将 driver=free 改成 driver=intel</li><li>并在其后面加上 xdriver=mesa acpi_osi=! acpi_osi=”Windows 2009”</li><li>然后按 Ctrl+X 或者 F10启动。</li></ul><h3 id="分区建议"><a href="#分区建议" class="headerlink" title="分区建议"></a>分区建议</h3><p>我是128G固态+1TB机械的硬盘,其中300G用来安装Windows,剩下的全部用来装manjaro.将要安装的硬盘全部删除,在进行挂载.</p><pre><code>注意!!!双系统一定要注意Windows的efi分区,七九不小心删除了,进不去了.</code></pre><ul><li>/home用剩下的600G机械挂载,文件系统为ext4</li><li>/boot用512M固态挂载,,文件系统为ext4</li><li>/boot/efi用512M固态挂载,文件系统为fat32</li><li>swap交换空间用8GB固态挂载</li><li>/usr用10GB固态挂载,文件系统为ext4</li><li>/  用剩余全部固态挂载,文件系统为ext4</li></ul><p>接下来基本上都是下一步即可.</p><h2 id="安装后的配置"><a href="#安装后的配置" class="headerlink" title="安装后的配置"></a>安装后的配置</h2><h3 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h3><ul><li>更改manjaro的国内源</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman-mirrors -i -c China -m rank</span><br><span class="line">sudo pacman -Syy</span><br></pre></td></tr></table></figure><ul><li><p>设置archlinux国内源</p><pre><code>[archlinuxcn]SigLevel = Optional TrustedOnlyServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch</code></pre></li><li><p>配置完成后,执行下列命令</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syy  </span><br><span class="line">sudo pacman -S archlinuxcn-keyring</span><br></pre></td></tr></table></figure><h3 id="pacman替代命令yay"><a href="#pacman替代命令yay" class="headerlink" title="pacman替代命令yay"></a>pacman替代命令yay</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yay</span><br></pre></td></tr></table></figure><p>yay 的命令参数跟pacman参数基本一致。</p><h3 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx-im</span><br><span class="line">sudo pacman -S fcitx-configtool</span><br><span class="line">sudo pacman -S fcitx-sogoupinyin</span><br></pre></td></tr></table></figure><p>添加输入法配置文件 sudo vim ~/.xprofile(没有就在主目录下创建一个,vim不行就用nao)</p><pre><code>export GTK_IM_MODULE=fcitxexport QT_IM_MODULE=fcitxexport XMODIFIERS=&quot;@im=fcitx&quot;</code></pre><h3 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h3><ul><li>微信 sudo pacman -S electronic-wechat yay -S deepin-wine-wechat</li><li>百度网盘 sudo pacman -S baidunetdisk-bin</li><li>VisualStudioCode sudo pacman -S visual-studio-code-bin</li><li>网易云音乐 sudo pacman -S netease-cloud-music</li><li>深度截图 sudo pacman -S deepin-screenshot</li><li>深度画板 sudo pacman -S deepin-draw</li><li>深度录屏 sudo pacman -S deepin-screen-recorder</li><li>WPS  sudo pacman -S wps-office和sudo pacman -S ttf-wps-fonts<br>安装后的一些操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/usenet506/article/details/94226200</span><br><span class="line">https://www.jianshu.com/p/e8fff0c7c3d2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -系统 -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在manjaro下使用wine</title>
      <link href="/2019/12/31/wine-de-shi-yong/"/>
      <url>/2019/12/31/wine-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="使用wine"><a href="#使用wine" class="headerlink" title="使用wine"></a>使用wine</h2><p>linux运行Windows程序</p><a id="more"></a><h2 id="运行-安装Windows应用"><a href="#运行-安装Windows应用" class="headerlink" title="运行/安装Windows应用"></a>运行/安装Windows应用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wine &lt;exe文件&gt;</span><br><span class="line">msiexec -i &lt;msi安装包&gt;</span><br></pre></td></tr></table></figure><h2 id="wine菜单管理"><a href="#wine菜单管理" class="headerlink" title="wine菜单管理"></a>wine菜单管理</h2><p>Wine中安装的应用可以在系统菜单中以Wine子菜单的形式呈现，给予打开应用的便利。例如在系统菜单中的WeChat启动项：<br>这一启动项在文件系统中的存储位置是~/.local/share/applications/wine/Programs/WeChat/WeChat.desktop<br>其内容为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#文件内容:</span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding&#x3D;UTF-8</span><br><span class="line">Name&#x3D;eclipse</span><br><span class="line">Comment&#x3D;The Java IDE for Java Developers</span><br><span class="line">Exec&#x3D;&#x2F;opt&#x2F;eclipse&#x2F;eclipse %F</span><br><span class="line">Path&#x3D;&#x2F;opt&#x2F;eclipse</span><br><span class="line">Icon&#x3D;&#x2F;opt&#x2F;eclipse&#x2F;icon.xpm</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Categories&#x3D;Application;Programme;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">语法解释：</span><br><span class="line">关键词                         意义</span><br><span class="line">[Desktop Entry]               文件头</span><br><span class="line">Encoding                      编码</span><br><span class="line">Name                          应用名称</span><br><span class="line">Name[xx]                      不同语言的应用名称</span><br><span class="line">GenericName                   描述</span><br><span class="line">Comment                       注释</span><br><span class="line">Exec                          执行的命令</span><br><span class="line">Icon                          图标路径</span><br><span class="line">Terminal                      是否使用终端</span><br><span class="line">Type                          启动器类型</span><br><span class="line">Categories                    应用的类型（内容相关）</span><br><span class="line"></span><br><span class="line">说明： </span><br><span class="line">其中 Exec 常用的参数有：%f %F %u %U </span><br><span class="line">%f：单个文件名。即使选择了多个文件。如果已选择的文件不在本地文件系统中（比如说在HTTP或者FTP上），这个文件将被作为一个临时文件复制到本地，％f将指向本地临时文件； </span><br><span class="line">%F：文件列表。用于程序可以同时打开多个本地文件。每个文件以分割段的方式传递给执行程序。 </span><br><span class="line">%u：单个URL。本地文件以文件URL或文件路径的方式传递。 </span><br><span class="line">%U：URL列表。每个URL以分割段的方式传递给执行程序。本地文件以文件URL或文件路径的方式传递。</span><br><span class="line">修改权限:</span><br><span class="line">chmod 755 test.desktop</span><br><span class="line">路径:&#x2F;usr&#x2F;share&#x2F;applications&#x2F;</span><br></pre></td></tr></table></figure><p>Wine安装应用时一般会添加这个菜单，如果没有的话可以在~/.local/share/applications/wine/下新建目录和.desktop文件，按[Desktop Entry]的格式自行设置。</p><h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><p>QQ音乐的使用应该超出了预期，qq是真的难用。</p>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装hexo</title>
      <link href="/2019/12/31/an-zhuang-hexo/"/>
      <url>/2019/12/31/an-zhuang-hexo/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我是参考<a href="https://www.jianshu.com/p/d49e4684e62b" target="_blank" rel="noopener">简书</a>这位老哥的教程的，算是很详细的了，主要是刚用 <strong>deepin</strong>（linux）不太熟悉，所以这位老哥对于我这种小白已经够详细了。中间有一个Github Page配置没有写，所以比较模糊。这也是我第一次使用博客，就以这个作为起点。这是我的<a href="https://ciaranhunt.github.io">博客地址</a>。</p><a id="more"></a><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Hexo的介绍及详细信息请查看<a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>,以下是个人安装过程。</p><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git</span><br></pre></td></tr></table></figure><p>安装完记得配置一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email <span class="string">"you@example.com"</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br></pre></td></tr></table></figure><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></h3><p>我是直接通过官下载并解压的，没有通过命令行（新手还是不太会）.<br><img src="https://s2.ax1x.com/2020/01/03/lUm9hR.png" alt="lUm9hR.png"><br>将下载的压缩文件移动到/opt目录下解压，接下来配置环境变量，利用管理员权限打开 <strong>/etc/profile</strong> 文件，增添以下内容，注意等号后面没有空格，保存退出。为了使该环境变量生效，可以在终端执行 <strong>source /etc/profile</strong>，或者重启。</p><pre><code># Node.jsexport NODE_HOME=/opt/node-v13.5.0-linux-x64/binexport PATH=$PATH:$NODE_HOME</code></pre><p>Node自带npm，但是npm更新频繁，要保持使最新版本，可以执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install npm -g</span><br></pre></td></tr></table></figure><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果碰到权限问题，可以参考：<a href="https://www.kancloud.cn/shellway/npm-doc/199985" target="_blank" rel="noopener">处理npm权限问题</a><br>安装后查看是否安装成功，利用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo version</span><br></pre></td></tr></table></figure><h2 id="建站及配置"><a href="#建站及配置" class="headerlink" title="建站及配置"></a>建站及配置</h2><h3 id="建站初始化"><a href="#建站初始化" class="headerlink" title="建站初始化"></a>建站初始化</h3><p>选择在 Documents 目录下创建 blog 文件夹来存放源文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Documents</span><br><span class="line">hexo init blog</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="生成文件及本地调试"><a href="#生成文件及本地调试" class="headerlink" title="生成文件及本地调试"></a>生成文件及本地调试</h3><p>初始化后执行 <strong>hexo generate</strong>或 <strong>hexo g</strong>可生成静态文件（public 文件夹）与缓存文件（data.json）。然后我们执行 <strong>hexo server</strong> 或 <strong>hexo s</strong> 就可以启动本地服务器，访问网址 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以查看文章效果了。<br><img src="https://s2.ax1x.com/2020/01/03/lUmdCn.png" alt="lUmdCn.png"></p><h3 id="部署到Github-Page"><a href="#部署到Github-Page" class="headerlink" title="部署到Github Page"></a>部署到Github Page</h3><p>1.我已经有了Github的账号，先新建一个项目，名字必须为<strong>username.github.io</strong>。</p><pre><code>注意：名字必须为username.github.io。</code></pre><p>2.进入项目的setting进行配置Github Page。<br><img src="https://s2.ax1x.com/2020/01/03/lUnpqS.png" alt="lUnpqS.png"><br>3.安装相关插件</p><pre><code>注意：插件下载时需要在博客的文件夹中，在本文就是 blog 文件夹！</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Documents/blog</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>4.然后修改Hexo的配置文件，位于blog文件夹下的<strong>_comfig.yml</strong>的最后几行</p><pre><code># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:    type: gitrepo:    git@github.com:ciaranhunt/ciaranhunt.github.io.gitbranch: master</code></pre><p>5.要发的博客内容位于blog/source/_posts，新建md文件即可，每次命令行切换到blog目录下，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>6.创作时Front-Matter<br><img src="https://s2.ax1x.com/2020/01/03/lUnnqU.png" alt="lUnnqU.png"><br>7.还可以修改一下URL，绑定创建的Github Page</p><pre><code>url: https://ciaranhunt.github.io</code></pre><h2 id="Hexo配置件简析"><a href="#Hexo配置件简析" class="headerlink" title="Hexo配置件简析"></a>Hexo配置件简析</h2><p>上文提到了 _config.yml 这一配置文件，它是关于网站的一些配置，具体说明可见 Hexo 官方文档。以下对官网有详细说明的内容就不再赘述，优先查看官网文档也是个好习惯。</p><pre><code># Site 网站# URL 网址# Directory 目录# Writing 文章# Home page setting 主页相关设置# Category &amp; Tag 分类 &amp; 标签# Date / Time format 日期 / 时间格式# Pagination 分页# Extensions 插件</code></pre><p>以上内容在官网中都有详细的说明介绍，在你搭建的开始，不需要在配置上面花费过多的精力，大部分保持默认设置即可。这里只补充说明有必要修改的部分。</p><h3 id="Site-网站"><a href="#Site-网站" class="headerlink" title="Site 网站"></a>Site 网站</h3><p>这一部分是显示在页面上的重要基本信息，如网站的标题、作者、说明等。这一定是要修改的，以我的配置为例：</p><pre><code># Sitetitle: ciaranhunt # 博客标题subtitle: Don&apos;t Repeat Yourself # 博客副标题description:  君子坦荡荡 小人长戚戚 # 博客描述，部分主题会用来生成简介keywords: # 通常建议包含网站的关键词author: ciaranhunt # 博客作者，部分主题会用来显示作者language: zh-CN # 语言，具体需要查看主题theme说明timezone: # 默认使用电脑的时区</code></pre><h3 id="URL-网址"><a href="#URL-网址" class="headerlink" title="URL 网址"></a>URL 网址</h3><p>只需要修改上一步提到的就行，其他默认即可.</p><h3 id="Home-page-setting-主页相关设置"><a href="#Home-page-setting-主页相关设置" class="headerlink" title="Home page setting 主页相关设置"></a>Home page setting 主页相关设置</h3><p>默认配置文件中只写了 index_generator 这部分，也就是首页的配置，事实上，查看 node_modules 文件中，可以看到有以下几个 generator：</p><pre><code>├── hexo-generator-archive├── hexo-generator-category├── hexo-generator-index├── hexo-generator-tag</code></pre><p>这也表明了我们博客可以通过以上几个维度来展示你的文章，它们分别是归档、分类、索引、标签，其中对于分类与标签我个人理解是一篇文章最好使用一个类别(category)和多个标签(tag)。</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>以Next主题为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> blog/themes/next</span><br><span class="line">git pull --rebase</span><br></pre></td></tr></table></figure><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>在 Hexo 中切换主题需要修改站点配置文件中的 theme 一节。</p><p>从预览可以看到，虽然站点配置文件设置了网站的语言为 zh-Hans 但还是英语显示（我是说主页与归档这两个词……），原因其实很简单，NexT 主题中，中文需要指定的 language 字段不是 zh-Hans，而是 zh-CN，所以 language 字段的配置需要查看具体的主题是如何定义。NexT 的语言列表对应关系可见 NexT 主题语言文件夹：themes/next/language/，修改之后再次预览就可以看到切换为中文显示了。</p><p>修改了站点配置文件已经可以使用上简洁的 NexT 主题了，而主题还可以进行配置使得显示效果更符合你的心意。</p><h2 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h2><h3 id="外观（Scheme）"><a href="#外观（Scheme）" class="headerlink" title="外观（Scheme）"></a>外观（Scheme）</h3><p>NexT 主题通过 Scheme 设置可展现出不同的外观。而且几乎可以说所有的配置都可以在 Scheme 之间共用。<br>修改主题配置文件 scheme 一节：</p><pre><code># Schemes#scheme: Muse#scheme: Mist#scheme: Piscesscheme: Gemini</code></pre><p>当前提供了四种样式，去掉某一样式的行首注释即可使用，修改之后可预览查看显示效果。你可以修改选择自己喜欢的样式。</p><h3 id="菜单（Menu）"><a href="#菜单（Menu）" class="headerlink" title="菜单（Menu）"></a>菜单（Menu）</h3><p>在修改站点配置文件的时候说到博客可以显示归档、分类、标签等，下面展示如何修改主题配置文件使得能够真正地展示这几个页面。</p><p>修改主题配置文件 menu 一节：</p><pre><code>menu:  home: / || home  #about: /about/ || user  tags: /tags/ || tags # 取消注释，需要手动创建该页面  categories: /categories/ || th # 取消注释，需要手动创建该页面  archives: /archives/ || archive  #schedule: /schedule/ || calendar  #sitemap: /sitemap.xml || sitemap  #commonweal: /404/ || heartbeat</code></pre><p>取消 tags 和 categories 两行的注释，预览可以看到已经在界面上显示这两个菜单了，但单击选择时页面提示：Cannot GET /categories/ ，这是因为我们还未创建对应的页面。</p><h2 id="完成基础搭建"><a href="#完成基础搭建" class="headerlink" title="完成基础搭建"></a>完成基础搭建</h2><p>经过以上步骤，一个 Hexo 博客已经搭建出来了，并且我们可以愉快地发表文章了！</p><p>后续可修改的内容还有很多，可以给博客添加更多的功能如搜索、评论、阅读量统计等，还可以对博客进行个性化定制如头像、背景的修改等等。这些内容我们可以查看主题的说明文档、网站、配置文件，它们一般都对支持的配置进行了说明。</p><p>博客的修改暂且不表，后续还要考虑一个问题：程序员一般都不只一台电脑，想在不同电脑上都能维护博客怎么办？或者说以上配置、发布的内容丢失了，博客又怎么找回？可以看到，远程仓库中上传的只有编译好的网页文件，而没有这些博客源文件、文章、主题、配置等，因此我们需要合理备份这些内容来解决上面这个问题。</p>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换hexo主题</title>
      <link href="/2019/12/31/geng-huan-hexo-zhu-ti/"/>
      <url>/2019/12/31/geng-huan-hexo-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>刚安装hexo的时候就已经安装了Next主题，之后又想安装其它主题，找到了<a href="https://theme-suka.skk.moe/" target="_blank" rel="noopener">suka主题</a>,本来打算不折腾，没想到又折腾到manjaro了（不过manjaro的自定义程度是真的高）。好了，开始！</p><a id="more"></a><h2 id="下载suka"><a href="#下载suka" class="headerlink" title="下载suka"></a>下载suka</h2><h3 id="1-可以直接在官方的github的Realese页面下载"><a href="#1-可以直接在官方的github的Realese页面下载" class="headerlink" title="1.可以直接在官方的github的Realese页面下载"></a>1.可以直接在官方的github的Realese页面下载</h3><ul><li><p><a href="https://github.com/SukkaW/hexo-theme-suka/releases/latest" target="_blank" rel="noopener">下载最新Realese版本</a></p><pre><code>最新的释出版本，适合绝大部分用户</code></pre></li><li><p><a href="https://github.com/SukkaW/hexo-theme-suka/archive/canary.zip" target="_blank" rel="noopener">下载 Canary 版本</a></p><pre><code>包含最新的、尚在开发中的特性，可能不稳定；适合进阶用户和开发者。</code></pre></li><li><p><a href="https://github.com/SukkaW/hexo-theme-suka/releases" target="_blank" rel="noopener">下载 其它 版本</a></p><pre><code>你可以自己决定想要使用的版本；部分版本可能不再提供技术支持。</code></pre><p>  <img src="https://s2.ax1x.com/2020/01/03/lUlMCQ.png" alt="lUlMCQ.png"></p></li></ul><h3 id="2-你可以自己决定想要使用的分支；使用-Git-下载「Suka」以后还可以使用-git-pull-更新「Suka」"><a href="#2-你可以自己决定想要使用的分支；使用-Git-下载「Suka」以后还可以使用-git-pull-更新「Suka」" class="headerlink" title="2.你可以自己决定想要使用的分支；使用 Git 下载「Suka」以后还可以使用 git pull 更新「Suka」"></a>2.你可以自己决定想要使用的分支；使用 Git 下载「Suka」以后还可以使用 git pull 更新「Suka」</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/SukkaW/hexo-theme-suka.git suka</span><br><span class="line"><span class="built_in">cd</span> suka</span><br><span class="line">git checkout &#123;branch/tags name/commit <span class="built_in">hash</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="安装suka"><a href="#安装suka" class="headerlink" title="安装suka"></a>安装suka</h2><p>和其他主题不同，安装「Suka」需要额外的步骤；前往「Suka」主题目录下执行 npm install –production 指令安装「Suka」运行时所必须的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/suka</span><br><span class="line">npm install --production</span><br></pre></td></tr></table></figure><p>同时你需要把「Suka」主题目录下的 _config.example.yml 复制一份并把副本重命名为 _config.yml。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp -i _config.example.yml _config.yml</span><br></pre></td></tr></table></figure><p>然后回到站点根目录，执行：  </p><p><code>bash cat /themes/suka/site_config.yml &gt;&gt; _config.yml</code><br>现在你的 <strong>站点配置文件</strong> 应该是这样:<br><img src="https://s2.ax1x.com/2020/01/03/lUltET.png" alt="lUltET.png"></p><h2 id="运行suka"><a href="#运行suka" class="headerlink" title="运行suka"></a>运行suka</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="更新suka"><a href="#更新suka" class="headerlink" title="更新suka"></a>更新suka</h2><p>如果你是在 版本发布页 下载并安装的「Suka」，那么你需要备份你的 主题备份文件，然后将旧的主题文件夹命名为 <strong>suka-old</strong>，将下载的新版本「Suka」重命名为 <strong>suka</strong>，根据更新日志的指导迁移旧的 主题配置文件 到新的 主题配置文件 中。测试通过后你可以将 <strong>suka-old</strong> 删除。</p><p>如果你使用 <strong>Git</strong> 安装的「Suka」，你可以直接在主题文件夹下运行 <strong>git pull</strong> 更新主题，并把备份之前的 主题配置文件 重命名为 <strong>_config.old.yml</strong>，复制一份<strong>_config.example.yml</strong> 并重命名为 <strong>_config.yml</strong>。从 <strong>_config.old.yml</strong> 迁移你的配置到新的 <strong>_config.yml</strong>测试通过后你可以将 <strong>_config.old.yml</strong> 删除。</p><pre><code>注意:一定要备份一下</code></pre><h2 id="Butterfly主题"><a href="#Butterfly主题" class="headerlink" title="Butterfly主题"></a>Butterfly主题</h2><h3 id="平滑升级"><a href="#平滑升级" class="headerlink" title="平滑升级"></a>平滑升级</h3><p>为了主题的平滑升级, Butterfly使用了data files特性。</p><p>推荐把主题默认的配置文件_config.yml复制到Hexo工作目录下的source/_data/butterfly.yml，如果source/_data的目录不存在那就创建一个。</p><pre><code>注意，如果你创建了butterfly.yml,它将会替换主题默认配置文件_config.yml里的配置项( 不是合并而是替换 ),之后你就只需要通过git pull的方式就可以平滑地升级theme-butterfly了。</code></pre><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><pre><code>---     title:     date:     tags:     categories:     keywords:     description:     top_img: （除非特定需要，可以不写）    comments是否显示评论（除非设置false,可以不写）    cover:缩略图    toc:是否显示toc （除非特定文章设置，可以不写）    toc_number:是否显示toc数字（除非特定文章设置，可以不写）    copyright:是否显示版权（除非特定文章设置，可以不写）    mathjax:     katex:     hide: ---</code></pre>]]></content>
      
      
      <categories>
          
          <category> -技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
