[{"title":"安装hexo","date":"2019-12-31T10:10:24.000Z","url":"/2019/12/31/%E5%AE%89%E8%A3%85hexo/","tags":["-Performance"],"categories":["-技术向"],"content":"前言我是参考简书这位老哥的教程的，算是很详细的了，主要是刚用 deepin（linux）不太熟悉，所以这位老哥对于我这种小白已经够详细了。中间有一个Github Page配置没有写，所以比较模糊。这也是我第一次使用博客，就以这个作为起点。这是我的博客地址。 环境搭建Hexo的介绍及详细信息请查看官方文档,以下是个人安装过程。 安装Git安装完记得配置一下： 安装Node.js我是直接通过官下载并解压的，没有通过命令行（新手还是不太会）.将下载的压缩文件移动到/opt目录下解压，接下来配置环境变量，利用管理员权限打开 /etc/profile 文件，增添以下内容，注意等号后面没有空格，保存退出。为了使该环境变量生效，可以在终端执行 source /etc/profile，或者重启。 Node自带npm，但是npm更新频繁，要保持使最新版本，可以执行以下命令： 安装Hexo如果碰到权限问题，可以参考：处理npm权限问题安装后查看是否安装成功，利用 hexo version 建站及配置建站初始化选择在 Documents 目录下创建 blog 文件夹来存放源文件。 生成文件及本地调试初始化后执行 hexo generate或 hexo g可生成静态文件（public 文件夹）与缓存文件（data.json）。然后我们执行 hexo server 或 hexo s 就可以启动本地服务器，访问网址  就可以查看文章效果了。 部署到Github Page1.我已经有了Github的账号，先新建一个项目，名字必须为username.github.io。 2.进入项目的setting进行配置Github Page。3.安装相关插件 4.然后修改Hexo的配置文件，位于blog文件夹下的_comfig.yml的最后几行 5.要发的博客内容位于blog/source/_posts，新建md文件即可，每次命令行切换到blog目录下， 6.还可以修改一下URL，绑定创建的Github Page Hexo配置件简析上文提到了 _config.yml 这一配置文件，它是关于网站的一些配置，具体说明可见 Hexo 官方文档。以下对官网有详细说明的内容就不再赘述，优先查看官网文档也是个好习惯。 以上内容在官网中都有详细的说明介绍，在你搭建的开始，不需要在配置上面花费过多的精力，大部分保持默认设置即可。这里只补充说明有必要修改的部分。 Site 网站这一部分是显示在页面上的重要基本信息，如网站的标题、作者、说明等。这一定是要修改的，以我的配置为例： URL 网址只需要修改上一步提到的就行，其他默认即可. Home page setting 主页相关设置默认配置文件中只写了 index_generator 这部分，也就是首页的配置，事实上，查看 node_modules 文件中，可以看到有以下几个 generator： 这也表明了我们博客可以通过以上几个维度来展示你的文章，它们分别是归档、分类、索引、标签，其中对于分类与标签我个人理解是一篇文章最好使用一个类别(category)和多个标签(tag)。 主题安装主题以Next主题为例 更新主题切换主题在 Hexo 中切换主题需要修改站点配置文件中的 theme 一节。 从预览可以看到，虽然站点配置文件设置了网站的语言为 zh-Hans 但还是英语显示（我是说主页与归档这两个词……），原因其实很简单，NexT 主题中，中文需要指定的 language 字段不是 zh-Hans，而是 zh-CN，所以 language 字段的配置需要查看具体的主题是如何定义。NexT 的语言列表对应关系可见 NexT 主题语言文件夹：themes/next/language/，修改之后再次预览就可以看到切换为中文显示了。 修改了站点配置文件已经可以使用上简洁的 NexT 主题了，而主题还可以进行配置使得显示效果更符合你的心意。 主题配置文件外观（Scheme）NexT 主题通过 Scheme 设置可展现出不同的外观。而且几乎可以说所有的配置都可以在 Scheme 之间共用。修改主题配置文件 scheme 一节： 当前提供了四种样式，去掉某一样式的行首注释即可使用，修改之后可预览查看显示效果。你可以修改选择自己喜欢的样式。 菜单（Menu）在修改站点配置文件的时候说到博客可以显示归档、分类、标签等，下面展示如何修改主题配置文件使得能够真正地展示这几个页面。 修改主题配置文件 menu 一节： 取消 tags 和 categories 两行的注释，预览可以看到已经在界面上显示这两个菜单了，但单击选择时页面提示：Cannot GET /categories/ ，这是因为我们还未创建对应的页面。 完成基础搭建经过以上步骤，一个 Hexo 博客已经搭建出来了，并且我们可以愉快地发表文章了！ 后续可修改的内容还有很多，可以给博客添加更多的功能如搜索、评论、阅读量统计等，还可以对博客进行个性化定制如头像、背景的修改等等。这些内容我们可以查看主题的说明文档、网站、配置文件，它们一般都对支持的配置进行了说明。 博客的修改暂且不表，后续还要考虑一个问题：程序员一般都不只一台电脑，想在不同电脑上都能维护博客怎么办？或者说以上配置、发布的内容丢失了，博客又怎么找回？可以看到，远程仓库中上传的只有编译好的网页文件，而没有这些博客源文件、文章、主题、配置等，因此我们需要合理备份这些内容来解决上面这个问题。"},{"title":"更换hexo主题--suka","date":"2019-12-31T10:10:24.000Z","url":"/2019/12/31/%E6%9B%B4%E6%8D%A2hexo%E4%B8%BB%E9%A2%98/","tags":["-Performance"],"categories":["-技术向"],"content":"前言刚安装hexo的时候就已经安装了Next主题，之后又想安装其它主题，找到了suka主题,本来打算不折腾，没想到又折腾到manjaro了（不过manjaro的自定义程度是真的高）。好了，开始！ 下载suka1.可以直接在官方的github的Realese页面下载 下载最新Realese版本 下载 Canary 版本 下载 其它 版本 2.通过git命令下载 2.你可以自己决定想要使用的分支；使用 Git 下载「Suka」以后还可以使用 git pull 更新「Suka」。安装suka和其他主题不同，安装「Suka」需要额外的步骤；前往「Suka」主题目录下执行 npm install –production 指令安装「Suka」运行时所必须的依赖。 同时你需要把「Suka」主题目录下的 _config.example.yml 复制一份并把副本重命名为 _config.yml。 然后回到站点根目录，执行： 现在你的 站点配置文件 应该是这样: 运行suka更新suka如果你是在 版本发布页 下载并安装的「Suka」，那么你需要备份你的 主题备份文件，然后将旧的主题文件夹命名为 suka-old，将下载的新版本「Suka」重命名为 suka，根据更新日志的指导迁移旧的 主题配置文件 到新的 主题配置文件 中。测试通过后你可以将 suka-old 删除。 如果你使用 Git 安装的「Suka」，你可以直接在主题文件夹下运行 git pull 更新主题，并把备份之前的 主题配置文件 重命名为 _config.old.yml，复制一份_config.example.yml 并重命名为 _config.yml。从 _config.old.yml 迁移你的配置到新的 _config.yml测试通过后你可以将 _config.old.yml 删除。 "}]